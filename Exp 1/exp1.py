# -*- coding: utf-8 -*-
"""EXP1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sHpxGX-HEUgyIps4zRspAe9153QNS1nl
"""

import numpy as np
import matplotlib.pyplot as plt

np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

num_iterations = 100
learning_rate = 0.06

theta0 = np.random.randn()
theta1 = np.random.randn()

mae_history = []
iteration_history = []

for i in range(num_iterations):
    y_pred = theta0 + theta1 * X
    error = y_pred - y
    theta0 -= learning_rate * (1/len(X)) * np.sum(error)
    theta1 -= learning_rate * (1/len(X)) * np.sum(error * X)

    mae = np.mean(np.abs(y - (theta0 + theta1 * X)))
    mae_history.append(mae)
    iteration_history.append(i)

plt.scatter(X, y, label='Data Points')
plt.plot(X, theta0 + theta1 * X, color='red', label='Line of Best Fit')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression with Gradient Descent')
plt.legend()
plt.show()

print("")
print(f"Mean Absolute Error: {mae}")
print(f"Optimal theta0 (intercept): {theta0}")
print(f"Optimal theta1 (slope): {theta1}")
print("")

plt.plot(iteration_history, mae_history)
plt.xlabel('Number of Iterations')
plt.ylabel('Mean Absolute Error (MAE)')
plt.title('MAE vs. Number of Iterations')
plt.show()